{
    "displacementShader": {
        "target_typepath": "range",
        "source_port": {
            "displacement": {
                "datatype_convert":{
                    "source": "float",
                    "target": "color3"
                },
                "target_portpath": [
                    "input",
                    "rgb"
                ]
            }
        },

        "create_expression": {
            "command":
            [
                "mtl_port_0 = self.tgtNode().port('output_min')",
                "mtl_port_1 = self.tgtNode().port('output_max')",
                "mtl_port_2 = self.tgtNode().port('contrast_pivot')",
                "src_port_1 = self.srcNode().port('aiDisplacementZeroValue')",
                "dcc_zero_value = src_port_1.portraw()",
                "mtl_port_0.setPortraw(0-dcc_zero_value);mtl_port_1.setPortraw(1-dcc_zero_value);mtl_port_2.setPortraw(0.0)"
            ]
        },
        "after_expression": {
            "command":
            [
                "srcGeometryObjList = self.tgtNode().allOutputNodes(include='mesh') or []",
                "src_port_1 = self.srcNode().port('aiDisplacementAutoBump')",
                "dcc_portdata_0 = src_port_1.portraw()",
                "[i.port('disp_autobump').setPortraw(dcc_portdata_0) for i in srcGeometryObjList]",

                "dcc_port_1 = self.srcNode().port('aiDisplacementPadding')",
                "dcc_portdata_1 = dcc_port_1.portraw()",
                "[i.port('disp_padding').setPortraw(dcc_portdata_1) for i in srcGeometryObjList]",

                "dcc_port_2 = self.srcNode().port('aiDisplacementZeroValue')",
                "dcc_portdata_2 = dcc_port_2.portraw()",
                "[i.port('disp_zero_value').setPortraw(dcc_portdata_2) for i in srcGeometryObjList]"
            ]
        }
    },

    "file": {
        "target_typepath": "image",
        "source_port": {
            "fileTextureName": {
                "target_portpath": "filename"
            },
            "colorSpace": {
                "target_portpath": "color_space"
            },
            "colorGain": {
                "target_portpath": "multiply"
            },
            "colorOffset": {
                "target_portpath": "offset"
            }
        },

        "target_port": {
            "ignore_missing_textures": {
                "portraw": "true"
            },
            "missing_texture_color": {
                "portraw": "0.5, 0.5, 0.5, 0"
            }
        },

        "create_expression": {
            "command":
            [
                "self._cmd_set_color_correct_insert_({'alpha_is_luminance': 'alphaIsLuminance'})",
                "fileString = self.tgtNode().inport('filename').portrawString()",
                "convertFileString = self._cmd_set_multi_texture_covert_(fileString)",
                "self.tgtNode().port('filename').setPortraw(convertFileString)"
            ]
        }
    },

    "place2dTexture": {
        "target_typepath": "uv_transform",
        "source_port": {
            "coverage": {
                "datatype_convert":{
                    "source": "texturecoord2_0",
                    "target": "vector2"
                },
                "target_portpath": "coverage"
            },
            "translateFrame": {
                "datatype_convert":{
                    "source": "texturecoord2_0",
                    "target": "vector2"
                },
                "target_portpath": "translate_frame"
            },
            "rotateFrame": {
                "target_portpath": "rotate_frame"
            },
            "mirrorU": {
                "target_portpath": "mirror_u"
            },
            "mirrorV": {
                "target_portpath": "mirror_v"
            },
            "stagger": {
                "target_portpath": "stagger"
            },
            "repeatUV": {
                "datatype_convert":{
                    "source": "texturecoord2_1",
                    "target": "vector2"
                },
                "target_portpath": "repeat"
            },
            "offset": {
                "datatype_convert":{
                    "source": "texturecoord2_0",
                    "target": "vector2"
                },
                "target_portpath": "offset"
            },
            "rotateUV": {
                "target_portpath": "rotate"
            },
            "noiseUV": {
                "datatype_convert":{
                    "source": "texturecoord2_1",
                    "target": "vector2"
                },
                "target_portpath": "noise"
            }
        },

        "create_expression": {
            "command": [
                "targetSrcNodes = self.srcNode().outputNodes(include='file')",
                "self._cmd_set_node_insert_(targetSrcNodes, 'rgba', 'passthrough', 'rgba')"
            ]
        }
    },

    "samplerInfo": {
        "target_typepath": "facing_ratio",
        "source_port": {
            "facingRatio": {
                "target_portpath": "float"
            }
        },
        "create_expression": {
            "command": [
                "targetSrcNodes = self.srcNode().outputNodes(include='ramp')",
                "[self.getTrsNode(i.pathString()).tgtNode().port('type').setPortrawString('custom') for i in targetSrcNodes]",
                "[self.tgtNode().otport('float').connectTo(self.getTrsNode(i.pathString()).tgtNode().inport('input')) for i in targetSrcNodes]"
            ]
        }
    },

    "ramp": {
        "target_typepath": "ramp_rgb",
        "source_port": {
            "type": {
                "target_portpath": "type",
                "portraw_convert": {
                    "enumerate": {
                        "V Ramp": "v",
                        "U Ramp": "u",
                        "Diagonal Ramp": "diagonal",
                        "Radial Ramp": "radial",
                        "Circular Ramp": "circular",
                        "Box Ramp": "box"
                    }
                }
            },
            "colorEntryList.color": {
                "target_portpath": "color"
            },
            "colorEntryList.position": {
                "target_portpath": "position"
            },
            "outAlpha": {
                "target_portpath": "position"
            }
        },

        "create_expression": {
            "command": [
                "self._cmd_set_color_correct_insert_({'alpha_is_luminance': 'alphaIsLuminance', 'multiply': 'colorGain', 'add': 'colorOffset', 'alpha_multiply': 'alphaGain', 'alpha_add': 'alphaOffset'})",

                "data = self.srcNode().port('interpolation').portraw(asString=False)",
                "indexes = self.srcNode().port('colorEntryList').multiIndexes()",
                "self.tgtNode().inport('interpolation').setPortraw([data]*len(indexes))"
            ]
        }
    },

    "bump2d@bump2d": {
        "target_typepath": "normal_map",
        "source_port": {
            "bumpValue": {
                "datatype_convert":{
                    "source": "float",
                    "target": "vector2"
                },
                "target_portpath": "input"
            },
            "bumpInterp": {
                "target_portpath": "order",
                "portraw_convert": {
                    "enumerate": {
                        "Tangent Space Normals": "YXZ",
                        "Object Space Normals": "XYZ"
                    }
                }
            },
            "aiFlipR": {
                "target_portpath": "invert_x"
            },
            "aiFlipG": {
                "target_portpath": "invert_y"
            }
        }
    },

    "bump2d": {
        "target_typepath": "bump2d",
        "source_port": {
            "bumpValue": {
                "datatype_convert":{
                    "source": "float",
                    "target": "vector2"
                },
                "target_portpath": "bump_map"
            },
            "bumpDepth": {
                "target_portpath": "bump_height"
            }
        }
    },


    "lambert": {
        "target_typepath": "lambert",
        "source_port": {
            "diffuse": {
                "target_portpath": "Kd"
            },
            "color": {
                "target_portpath": "Kd_color"
            },
            "transparency": {
                "target_portpath": "opacity"
            },
            "normalCamera": {
                "target_portpath": "normal"
            }
        }
    },

    "blinn": {
        "target_typepath": "standard_surface",
        "source_port": {
            "color": {
                "target_portpath": "base_color"
            },
            "specularRollOff": {
                "target_portpath": "specular"
            },
            "specularColor": {
                "target_portpath": "specular_color"
            },
            "eccentricity": {
                "target_portpath": "specular_roughness"
            },
            "reflectivity": {
                "target_portpath": "coat"
            },
            "reflectedColor": {
                "target_portpath": "coat_color"
            }
        },
        "target_port": {
            "specular_IOR": {
                "portraw": "3"
            },
            "coat_IOR": {
                "portraw": "3"
            },
            "emission": {
                "portraw": "1"
            },
            "emission_color": {
                "portraw": "0, 0, 0"
            }
        }
    }
}