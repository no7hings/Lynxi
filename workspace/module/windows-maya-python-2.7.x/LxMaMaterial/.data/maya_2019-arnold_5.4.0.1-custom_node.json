{
    "displacementShader": {
        "mtl_category": "range",
        "dcc_port": {
            "displacement": {
                "source_porttype": "float",
                "target_portpath": [
                    "input",
                    "rgb"
                ]
            }
        },

        "create_expression": {
            "command":
            [
                "mtl_port_0 = self.mtlNode().port('output_min')",
                "mtl_port_1 = self.mtlNode().port('output_max')",
                "mtl_port_2 = self.mtlNode().port('contrast_pivot')",
                "dcc_port_0 = self.dccNode().port('aiDisplacementZeroValue')",
                "dcc_zero_value = dcc_port_0.portdata()",
                "mtl_port_0.setPortdata(0-dcc_zero_value);mtl_port_1.setPortdata(1-dcc_zero_value);mtl_port_2.setPortdata(0.0)"
            ]
        },
        "after_expression": {
            "command":
            [
                "mtlGeometries = self.mtlNode().allTargetNodes('mesh') or []",
                "dcc_port_0 = self.dccNode().port('aiDisplacementAutoBump')",
                "dcc_portdata_0 = dcc_port_0.portdata()",
                "[i.port('disp_autobump').setPortdata(dcc_portdata_0) for i in mtlGeometries]",

                "dcc_port_1 = self.dccNode().port('aiDisplacementPadding')",
                "dcc_portdata_1 = dcc_port_1.portdata()",
                "[i.port('disp_padding').setPortdata(dcc_portdata_1) for i in mtlGeometries]",

                "dcc_port_2 = self.dccNode().port('aiDisplacementZeroValue')",
                "dcc_portdata_2 = dcc_port_2.portdata()",
                "[i.port('disp_zero_value').setPortdata(dcc_portdata_2) for i in mtlGeometries]"
            ]
        }
    },

    "file": {
        "mtl_category": "image",
        "dcc_port": {
            "fileTextureName": {
                "target_portpath": "filename"
            },
            "colorSpace": {
                "target_portpath": "color_space"
            },
            "colorGain": {
                "target_portpath": "multiply"
            },
            "colorOffset": {
                "target_portpath": "offset"
            }
        },

        "mtl_port": {
            "ignore_missing_textures": {
                "portdata": "true"
            },
            "missing_texture_color": {
                "portdata": "0.5, 0.5, 0.5, 0"
            }
        },

        "create_expression": {
            "command":
            [
                "self._runInsertColorCorrectExpression_({'alpha_is_luminance': 'alphaIsLuminance'})",
                "self.mtlNode().port('filename').setPortdata(self._convertDccMultiTexture_(self.mtlNode().input('filename').portdataString()))"
            ]
        }
    },

    "place2dTexture": {
        "mtl_category": "uv_transform",
        "dcc_port": {
            "coverage": {
                "source_porttype": "uv_0",
                "target_portpath": "coverage"
            },
            "translateFrame": {
                "source_porttype": "uv_0",
                "target_portpath": "translate_frame"
            },
            "rotateFrame": {
                "target_portpath": "rotate_frame"
            },
            "mirrorU": {
                "target_portpath": "mirror_u"
            },
            "mirrorV": {
                "target_portpath": "mirror_v"
            },
            "stagger": {
                "target_portpath": "stagger"
            },
            "repeatUV": {
                "source_porttype": "uv_1",
                "target_portpath": "repeat"
            },
            "offset": {
                "source_porttype": "uv_0",
                "target_portpath": "offset"
            },
            "rotateUV": {
                "target_portpath": "rotate"
            },
            "noiseUV": {
                "source_porttype": "uv_1",
                "target_portpath": "noise"
            }
        },

        "create_expression": {
            "command": [
                "targetDccNodes = self.dccNode().targetNodes('file')",
                "self._runInsertToTargetExpression_(targetDccNodes, 'rgba', 'passthrough', 'rgba')"
            ]
        }
    },

    "samplerInfo": {
        "mtl_category": "facing_ratio",
        "dcc_port": {
            "facingRatio": {
                "target_portpath": "float"
            }
        },
        "create_expression": {
            "command": [
                "targetDccNodes = self.dccNode().targetNodes('ramp')",
                "[self.getTrsNode(i.nodepathString()).mtlNode().port('type').setPortdataString('custom') for i in targetDccNodes]",
                "[self.mtlNode().output('float').connectTo(self.getTrsNode(i.nodepathString()).mtlNode().input('input')) for i in targetDccNodes]"
            ]
        }
    },

    "ramp": {
        "mtl_category": "ramp_rgb",
        "dcc_port": {
            "type": {
                "target_portpath": "type"
            },
            "colorEntryList.color": {
                "target_portpath": "color"
            },
            "colorEntryList.position": {
                "target_portpath": "position"
            },
            "outAlpha": {
                "target_portpath": "position"
            }
        },

        "mtl_portdata": {
            "type": {
                "V Ramp": "v",
                "U Ramp": "u",
                "Diagonal Ramp": "diagonal",
                "Radial Ramp": "radial",
                "Circular Ramp": "circular",
                "Box Ramp": "box"
            }
        },

        "create_expression": {
            "command": [
                "self._runInsertColorCorrectExpression_({'alpha_is_luminance': 'alphaIsLuminance', 'multiply': 'colorGain', 'add': 'colorOffset', 'alpha_multiply': 'alphaGain', 'alpha_add': 'alphaOffset'})",

                "data = self.dccNode().port('interpolation').portdata(asString=False)",
                "indexes = self.dccNode().port('colorEntryList').indexes()",
                "self.mtlNode().input('interpolation').setPortdata([data]*len(indexes))"
            ]
        }
    },

    "bump2d@bump2d": {
        "mtl_category": "normal_map",
        "dcc_port": {
            "bumpValue": {
                "source_porttype": "float",
                "target_portpath": "input"
            },
            "bumpInterp": {
                "target_portpath": "order"
            },
            "aiFlipR": {
                "target_portpath": "invert_x"
            },
            "aiFlipG": {
                "target_portpath": "invert_y"
            }
        },

        "mtl_portdata": {
            "order": {
                "Tangent Space Normals": "YXZ",
                "Object Space Normals": "XYZ"
            }
        }
    },

    "bump2d": {
        "mtl_category": "bump2d",
        "dcc_port": {
            "bumpValue": {
                "source_porttype": "float",
                "target_portpath": "bump_map"
            },
            "bumpDepth": {
                "target_portpath": "bump_height"
            }
        }
    },


    "lambert": {
        "mtl_category": "lambert",
        "dcc_port": {
            "diffuse": {
                "target_portpath": "Kd"
            },
            "color": {
                "target_portpath": "Kd_color"
            },
            "transparency": {
                "target_portpath": "opacity"
            },
            "normalCamera": {
                "target_portpath": "normal"
            }
        }
    },

    "blinn": {
        "mtl_category": "standard_surface",
        "dcc_port": {
            "color": {
                "target_portpath": "base_color"
            },
            "specularRollOff": {
                "target_portpath": "specular"
            },
            "specularColor": {
                "target_portpath": "specular_color"
            },
            "eccentricity": {
                "target_portpath": "specular_roughness"
            },
            "reflectivity": {
                "target_portpath": "coat"
            },
            "reflectedColor": {
                "target_portpath": "coat_color"
            }
        },
        "mtl_port": {
            "specular_IOR": {
                "portdata": "3"
            },
            "coat_IOR": {
                "portdata": "3"
            },
            "emission": {
                "portdata": "1"
            },
            "emission_color": {
                "portdata": "0, 0, 0"
            }
        }
    }
}